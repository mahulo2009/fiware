version: "3.5"
services:

  # gcs
  gcs:
    image: mhuertas/instalacionconectada:gcs
    hostname: gcs
    container_name: gcs
    depends_on:
      - db   
    ports:
      - 25000-25100:25000-25100
      
  is:
    image: mhuertas/instalacionconectada:is
    hostname: is
    container_name: is
    volumes:
      - ./is_config/config.yml:/root/is-workspace/config/config.yml

           
  # Database
  db:
    image: mhuertas/instalacionconectada:mysql 
    hostname: db
    container_name: db
    ports:
       - 3306:3306
    volumes:
      - data:/var/lib/mysql     
    environment:
      - MYSQL_ROOT_PASSWORD=passroot

  # Orion is the context broker
  orion:
    image: fiware/orion:${ORION_VERSION} 
    hostname: orion
    container_name: orion
    depends_on:
      - mongo-db
    ports:
      - "${ORION_PORT}:${ORION_PORT}" # localhost:1026
    command: -dbhost mongo -logLevel DEBUG -noCache -corsOrigin __ALL -insecureNotif
    healthcheck:
      test: curl --fail -s http://orion:${ORION_PORT}/version || exit 1
      interval: 5s

  # Databases
  mongo-db:
    image: mongo:${MONGO_DB_VERSION}    
    hostname: mongo
    container_name: mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017 # localhost:27017
    volumes:
      - mongo-db:/data
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s

  # Kurento media server
  kurento:
    image: mhuertas/instalacionconectada:kms 
    hostname: kms
    container_name: kms 
    depends_on:
      - coturn
    expose:
      - "8888"
    ports:
      - 8888:8888
    env_file: .env
    environment:
      - KMS_STUN_IP=${IP_ADDRESS}
      - KMS_STUN_PORT=${KMS_STUN_PORT}
      - "KMS_TURN_URL=${TURN_USERNAME}:${TURN_PASSWORD}@${IP_ADDRESS}:${KMS_TURN_PORT}"
    volumes:
      - "${HOST_IMAGE_FOLDER}:${DOCKER_IMAGE_FOLDER}"
      
  # Coturn
  coturn:
    image: coturn/coturn:latest
    hostname: coturn
    container_name: coturn
    network_mode: host
    command: -L ${KMS_STUN_IP} -n --verbose --realm kurento.org --cipher-list ${CIPHER_LIST} --fingerprint --lt-cred-mech --listening-port ${KMS_TURN_PORT} --max-allocate-timeout=0 --relay-ip ${KMS_STUN_IP} && turnadmin -a -u ${TURN_USERNAME} -r kurento.org -p ${TURN_PASSWORD}
    volumes:
      - "${COTURN_DB_PATH}:/var/lib/coturn"        

  # Kurento application sevice
  kas:      
    image: mhuertas/instalacionconectada:kas 
    hostname: kas 
    container_name: kas
    network_mode: host
    depends_on:
      - kurento
      - orion
    env_file: .env
    environment:
      - ORION_NOTIFICATION_URL=https://${IP_ADDRESS}:${SERVER_PORT}/cameras
      - KURENTO_IP=${IP_ADDRESS}:8888

  web-cameras:
    image: mhuertas/instalacionconectada:web-cameras 
    hostname: web-cameras  
    container_name: web-cameras 
    network_mode: host
    depends_on:
      - kas 
    env_file:
      - .env
        
  mosquitto:
    image: eclipse-mosquitto:latest
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
      - "9001"
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf

  # Databases
  iot-agent:
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION} 
    hostname: iot-agent
    container_name: iot-agent
    depends_on:
      - mongo-db
    expose:
      - "${IOTA_NORTH_PORT}"
      - "${IOTA_SOUTH_PORT}"     
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
      - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
      - IOTA_MQTT_HOST=mosquitto
      - IOTA_MQTT_PORT=1883      
      - IOTA_DEFAULT_RESOURCE=/iot/d      
    healthcheck:
      interval: 5s   

  quantumleap:
    image: smartsdk/quantumleap 
    container_name: quantumleap
    ports:
      - "8668:8668"
    depends_on:
      - mongo-db
      - orion
      - crate
    environment:
      - CRATE_HOST=crate
    healthcheck:
      test: curl --fail -s http://localhost:8668/v2/version || exit 1

  crate:
    image: crate:4.1.8
    hostname: crate
    container_name: crate
    ports:
      # Admin UI
      - "4200:4200"
      # Transport protocol
      - "4300:4300"
    command: 
        crate -Cauth.host_based.enabled=false -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"
    environment:
        - CRATE_HEAP_SIZE=2g        
    volumes:
      - cratedata:/data

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      -  plugins="crate-datasource,grafana-clock-panel,grafana-worldmap-panel"
    depends_on:
      - crate        

    
volumes:
  mongo-db: 
  cratedata:
  redisdata:
  data:  
  
  
 
 #todo install vim in gcs
 #todo el cs podria ser sin scidb?
 #todo crate sysctl -w vm.max_map_count=262144
 #todo volume for grafana (not loosing cofiguration)
 #todo use curlcpp para crear todo lo necesario (servicioes...)

